function [fitresult, gof, output] = llafit(latTemp, latV, lonTemp, lonV, altTmp, altV)
%LLAFIT(LATTEMP,LATV,LONTEMP,LONV,ALTTMP,ALTV)
%  Create fits.
%
%  Data for 'lat fit' fit:
%      Y Output: latTemp
%      Validation Y: latV
%  Data for 'lonFit' fit:
%      Y Output: lonTemp
%      Validation Y: lonV
%  Data for 'hfit' fit:
%      Y Output: altTmp
%      Validation Y: altV
%  Output:
%      fitresult : a cell-array of fit objects representing the fits.
%      gof : structure array with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 27-Oct-2016 22:02:56

%% Initialization.

% Initialize arrays to store fits and goodness-of-fit.
fitresult = cell( 3, 1 );
gof = struct( 'sse', cell( 3, 1 ), ...
    'rsquare', [], 'dfe', [], 'adjrsquare', [], 'rmse', [] );

%% Fit: 'lat fit'.
[xData, yData] = prepareCurveData( [], latTemp );

% Set up fittype and options.
ft = fittype( 'poly5' );

% Fit model to data.
[fitresult{1}, gof(1), output(1)] = fit( xData, yData, ft );

% Compare against validation data.
[xValidation, yValidation] = prepareCurveData( [], latV );
residual = yValidation - fitresult{1}( xValidation );
nNaN = nnz( isnan( residual ) );
residual(isnan( residual )) = [];
sse = norm( residual )^2;
rmse = sqrt( sse/length( residual ) );
fprintf( 'Goodness-of-validation for ''%s'' fit:\n', 'lat fit' );
fprintf( '    SSE : %f\n', sse );
fprintf( '    RMSE : %f\n', rmse );
fprintf( '    %i points outside domain of data.\n', nNaN );

% % Plot fit with data.
% figure( 'Name', 'lat fit' );
% h = plot( fitresult{1}, xData, yData );
% % Add validation data to plot.
% hold on
% h(end+1) = plot( xValidation, yValidation, 'bo', 'MarkerFaceColor', 'w' );
% hold off
% legend( h, 'latTemp', 'lat fit', 'latV', 'Location', 'NorthEast' );
% % Label axes
% ylabel latTemp
% grid on

%% Fit: 'lonFit'.
[xData, yData] = prepareCurveData( [], lonTemp );

% Set up fittype and options.
ft = fittype( 'poly5' );

% Fit model to data.
[fitresult{2}, gof(2), output(2)] = fit( xData, yData, ft );

% Compare against validation data.
[xValidation, yValidation] = prepareCurveData( [], lonV );
residual = yValidation - fitresult{2}( xValidation );
nNaN = nnz( isnan( residual ) );
residual(isnan( residual )) = [];
sse = norm( residual )^2;
rmse = sqrt( sse/length( residual ) );
fprintf( 'Goodness-of-validation for ''%s'' fit:\n', 'lonFit' );
fprintf( '    SSE : %f\n', sse );
fprintf( '    RMSE : %f\n', rmse );
fprintf( '    %i points outside domain of data.\n', nNaN );

% % Plot fit with data.
% figure( 'Name', 'lonFit' );
% h = plot( fitresult{2}, xData, yData );
% % Add validation data to plot.
% hold on
% h(end+1) = plot( xValidation, yValidation, 'bo', 'MarkerFaceColor', 'w' );
% hold off
% legend( h, 'lonTemp', 'lonFit', 'lonV', 'Location', 'NorthEast' );
% % Label axes
% ylabel lonTemp
% grid on

%% Fit: 'hfit'.
[xData, yData] = prepareCurveData( [], altTmp );

% Set up fittype and options.
ft = fittype( 'poly6' );

% Fit model to data.
[fitresult{3}, gof(3), output(3)] = fit( xData, yData, ft, 'Normalize', 'on' );

% Compare against validation data.
[xValidation, yValidation] = prepareCurveData( [], altV );
residual = yValidation - fitresult{3}( xValidation );
nNaN = nnz( isnan( residual ) );
residual(isnan( residual )) = [];
sse = norm( residual )^2;
rmse = sqrt( sse/length( residual ) );
fprintf( 'Goodness-of-validation for ''%s'' fit:\n', 'hfit' );
fprintf( '    SSE : %f\n', sse );
fprintf( '    RMSE : %f\n', rmse );
fprintf( '    %i points outside domain of data.\n', nNaN );

% % Plot fit with data.
% figure( 'Name', 'hfit' );
% h = plot( fitresult{3}, xData, yData );
% % Add validation data to plot.
% hold on
% h(end+1) = plot( xValidation, yValidation, 'bo', 'MarkerFaceColor', 'w' );
% hold off
% legend( h, 'altTmp', 'hfit', 'altV', 'Location', 'NorthEast' );
% % Label axes
% ylabel altTmp
% grid on


